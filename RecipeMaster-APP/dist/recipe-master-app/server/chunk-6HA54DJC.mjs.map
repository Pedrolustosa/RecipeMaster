{"version":3,"sources":["node_modules/xhr2/lib/xhr2.js"],"sourcesContent":["// Generated by CoffeeScript 2.5.1\n(function() {\n  // This file's name is set up in such a way that it will always show up first in\n  // the list of files given to coffee --join, so that the other files can assume\n  // that XMLHttpRequestEventTarget was already defined.\n\n  // The DOM EventTarget subclass used by XMLHttpRequest.\n\n  // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n  var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url;\n\n  XMLHttpRequestEventTarget = (function() {\n    class XMLHttpRequestEventTarget {\n      // @private\n      // This is an abstract class and should not be instantiated directly.\n      constructor() {\n        this.onloadstart = null;\n        this.onprogress = null;\n        this.onabort = null;\n        this.onerror = null;\n        this.onload = null;\n        this.ontimeout = null;\n        this.onloadend = null;\n        this._listeners = {};\n      }\n\n      // Adds a new-style listener for one of the XHR events.\n\n      // @see http://www.w3.org/TR/XMLHttpRequest/#events\n\n      // @param {String} eventType an XHR event type, such as 'readystatechange'\n      // @param {function(ProgressEvent)} listener function that will be called when\n      //   the event fires\n      // @return {undefined} undefined\n      addEventListener(eventType, listener) {\n        var base;\n        eventType = eventType.toLowerCase();\n        (base = this._listeners)[eventType] || (base[eventType] = []);\n        this._listeners[eventType].push(listener);\n        return void 0;\n      }\n\n      // Removes an event listener added by calling addEventListener.\n\n      // @param {String} eventType an XHR event type, such as 'readystatechange'\n      // @param {function(ProgressEvent)} listener the value passed in a previous\n      //   call to addEventListener.\n      // @return {undefined} undefined\n      removeEventListener(eventType, listener) {\n        var index;\n        eventType = eventType.toLowerCase();\n        if (this._listeners[eventType]) {\n          index = this._listeners[eventType].indexOf(listener);\n          if (index !== -1) {\n            this._listeners[eventType].splice(index, 1);\n          }\n        }\n        return void 0;\n      }\n\n      // Calls all the listeners for an event.\n\n      // @param {ProgressEvent} event the event to be dispatched\n      // @return {undefined} undefined\n      dispatchEvent(event) {\n        var eventType, j, len, listener, listeners;\n        event.currentTarget = event.target = this;\n        eventType = event.type;\n        if (listeners = this._listeners[eventType]) {\n          for (j = 0, len = listeners.length; j < len; j++) {\n            listener = listeners[j];\n            listener.call(this, event);\n          }\n        }\n        if (listener = this[`on${eventType}`]) {\n          listener.call(this, event);\n        }\n        return void 0;\n      }\n\n    };\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'loadstart' event\n    XMLHttpRequestEventTarget.prototype.onloadstart = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'progress' event\n    XMLHttpRequestEventTarget.prototype.onprogress = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'abort' event\n    XMLHttpRequestEventTarget.prototype.onabort = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'error' event\n    XMLHttpRequestEventTarget.prototype.onerror = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'load' event\n    XMLHttpRequestEventTarget.prototype.onload = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'timeout' event\n    XMLHttpRequestEventTarget.prototype.ontimeout = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'loadend' event\n    XMLHttpRequestEventTarget.prototype.onloadend = null;\n\n    return XMLHttpRequestEventTarget;\n\n  }).call(this);\n\n  // This file's name is set up in such a way that it will always show up second\n  // in the list of files given to coffee --join, so it can use the\n  // XMLHttpRequestEventTarget definition and so that the other files can assume\n  // that XMLHttpRequest was already defined.\n  http = require('http');\n\n  https = require('https');\n\n  os = require('os');\n\n  url = require('url');\n\n  XMLHttpRequest = (function() {\n    // The ECMAScript HTTP API.\n\n    // @see http://www.w3.org/TR/XMLHttpRequest/#introduction\n    class XMLHttpRequest extends XMLHttpRequestEventTarget {\n      // Creates a new request.\n\n      // @param {Object} options one or more of the options below\n      // @option options {Boolean} anon if true, the request's anonymous flag\n      //   will be set\n      // @see http://www.w3.org/TR/XMLHttpRequest/#constructors\n      // @see http://www.w3.org/TR/XMLHttpRequest/#anonymous-flag\n      constructor(options) {\n        super();\n        this.onreadystatechange = null;\n        this._anonymous = options && options.anon;\n        this.readyState = XMLHttpRequest.UNSENT;\n        this.response = null;\n        this.responseText = '';\n        this.responseType = '';\n        this.responseURL = '';\n        this.status = 0;\n        this.statusText = '';\n        this.timeout = 0;\n        this.upload = new XMLHttpRequestUpload(this);\n        this._method = null; // String\n        this._url = null; // Return value of url.parse()\n        this._sync = false;\n        this._headers = null; // Object<String, String>\n        this._loweredHeaders = null; // Object<lowercase String, String>\n        this._mimeOverride = null;\n        this._request = null; // http.ClientRequest\n        this._response = null; // http.ClientResponse\n        this._responseParts = null; // Array<Buffer, String>\n        this._responseHeaders = null; // Object<lowercase String, String>\n        this._aborting = null;\n        this._error = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n      }\n\n      // Sets the XHR's method, URL, synchronous flag, and authentication params.\n\n      // @param {String} method the HTTP method to be used\n      // @param {String} url the URL that the request will be made to\n      // @param {?Boolean} async if false, the XHR should be processed\n      //   synchronously; true by default\n      // @param {?String} user the user credential to be used in HTTP basic\n      //   authentication\n      // @param {?String} password the password credential to be used in HTTP basic\n      //   authentication\n      // @return {undefined} undefined\n      // @throw {SecurityError} method is not one of the allowed methods\n      // @throw {SyntaxError} urlString is not a valid URL\n      // @throw {Error} the URL contains an unsupported protocol; the supported\n      //   protocols are file, http and https\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n      open(method, url, async, user, password) {\n        var xhrUrl;\n        method = method.toUpperCase();\n        if (method in this._restrictedMethods) {\n          throw new SecurityError(`HTTP method ${method} is not allowed in XHR`);\n        }\n        xhrUrl = this._parseUrl(url);\n        if (async === void 0) {\n          async = true;\n        }\n        switch (this.readyState) {\n          case XMLHttpRequest.UNSENT:\n          case XMLHttpRequest.OPENED:\n          case XMLHttpRequest.DONE:\n            // Nothing to do here.\n            null;\n            break;\n          case XMLHttpRequest.HEADERS_RECEIVED:\n          case XMLHttpRequest.LOADING:\n            // TODO(pwnall): terminate abort(), terminate send()\n            null;\n        }\n        this._method = method;\n        this._url = xhrUrl;\n        this._sync = !async;\n        this._headers = {};\n        this._loweredHeaders = {};\n        this._mimeOverride = null;\n        this._setReadyState(XMLHttpRequest.OPENED);\n        this._request = null;\n        this._response = null;\n        this.status = 0;\n        this.statusText = '';\n        this._responseParts = [];\n        this._responseHeaders = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n        return void 0;\n      }\n\n      // Appends a header to the list of author request headers.\n\n      // @param {String} name the HTTP header name\n      // @param {String} value the HTTP header value\n      // @return {undefined} undefined\n      // @throw {InvalidStateError} readyState is not OPENED\n      // @throw {SyntaxError} name is not a valid HTTP header name or value is not\n      //   a valid HTTP header value\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n      setRequestHeader(name, value) {\n        var loweredName;\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n          throw new InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n        loweredName = name.toLowerCase();\n        if (this._restrictedHeaders[loweredName] || /^sec\\-/.test(loweredName) || /^proxy-/.test(loweredName)) {\n          console.warn(`Refused to set unsafe header \\\"${name}\\\"`);\n          return void 0;\n        }\n        value = value.toString();\n        if (loweredName in this._loweredHeaders) {\n          // Combine value with the existing header value.\n          name = this._loweredHeaders[loweredName];\n          this._headers[name] = this._headers[name] + ', ' + value;\n        } else {\n          // New header.\n          this._loweredHeaders[loweredName] = name;\n          this._headers[name] = value;\n        }\n        return void 0;\n      }\n\n      // Initiates the request.\n\n      // @param {?String, ?ArrayBufferView} data the data to be sent; ignored for\n      //   GET and HEAD requests\n      // @return {undefined} undefined\n      // @throw {InvalidStateError} readyState is not OPENED\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n      send(data) {\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n          throw new InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n        if (this._request) {\n          throw new InvalidStateError(\"send() already called\");\n        }\n        switch (this._url.protocol) {\n          case 'file:':\n            this._sendFile(data);\n            break;\n          case 'http:':\n          case 'https:':\n            this._sendHttp(data);\n            break;\n          default:\n            throw new NetworkError(`Unsupported protocol ${this._url.protocol}`);\n        }\n        return void 0;\n      }\n\n      // Cancels the network activity performed by this request.\n\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method\n      abort() {\n        if (!this._request) {\n          return;\n        }\n        this._request.abort();\n        this._setError();\n        this._dispatchProgress('abort');\n        this._dispatchProgress('loadend');\n        return void 0;\n      }\n\n      // Returns a header value in the HTTP response for this XHR.\n\n      // @param {String} name case-insensitive HTTP header name\n      // @return {?String} value the value of the header whose name matches the\n      //   given name, or null if there is no such header\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n      getResponseHeader(name) {\n        var loweredName;\n        if (!this._responseHeaders) {\n          return null;\n        }\n        loweredName = name.toLowerCase();\n        if (loweredName in this._responseHeaders) {\n          return this._responseHeaders[loweredName];\n        } else {\n          return null;\n        }\n      }\n\n      // Returns all the HTTP headers in this XHR's response.\n\n      // @return {String} header lines separated by CR LF, where each header line\n      //   has the name and value separated by a \": \" (colon, space); the empty\n      //   string is returned if the headers are not available\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n      getAllResponseHeaders() {\n        var lines, name, value;\n        if (!this._responseHeaders) {\n          return '';\n        }\n        lines = (function() {\n          var ref, results;\n          ref = this._responseHeaders;\n          results = [];\n          for (name in ref) {\n            value = ref[name];\n            results.push(`${name}: ${value}`);\n          }\n          return results;\n        }).call(this);\n        return lines.join(\"\\r\\n\");\n      }\n\n      // Overrides the Content-Type\n\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype()-method\n      overrideMimeType(newMimeType) {\n        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n          throw new InvalidStateError(\"overrideMimeType() not allowed in LOADING or DONE\");\n        }\n        this._mimeOverride = newMimeType.toLowerCase();\n        return void 0;\n      }\n\n      // Network configuration not exposed in the XHR API.\n\n      // Although the XMLHttpRequest specification calls itself \"ECMAScript HTTP\",\n      // it assumes that requests are always performed in the context of a browser\n      // application, where some network parameters are set by the browser user and\n      // should not be modified by Web applications. This API provides access to\n      // these network parameters.\n\n      // NOTE: this is not in the XMLHttpRequest API, and will not work in\n      // browsers.  It is a stable node-xhr2 API.\n\n      // @param {Object} options one or more of the options below\n      // @option options {?http.Agent} httpAgent the value for the nodejsHttpAgent\n      //   property (the agent used for HTTP requests)\n      // @option options {?https.Agent} httpsAgent the value for the\n      //   nodejsHttpsAgent property (the agent used for HTTPS requests)\n      // @return {undefined} undefined\n      nodejsSet(options) {\n        var baseUrl, parsedUrl;\n        if ('httpAgent' in options) {\n          this.nodejsHttpAgent = options.httpAgent;\n        }\n        if ('httpsAgent' in options) {\n          this.nodejsHttpsAgent = options.httpsAgent;\n        }\n        if ('baseUrl' in options) {\n          baseUrl = options.baseUrl;\n          if (baseUrl !== null) {\n            parsedUrl = url.parse(baseUrl, false, true);\n            if (!parsedUrl.protocol) {\n              throw new SyntaxError(\"baseUrl must be an absolute URL\");\n            }\n          }\n          this.nodejsBaseUrl = baseUrl;\n        }\n        return void 0;\n      }\n\n      // Default settings for the network configuration not exposed in the XHR API.\n\n      // NOTE: this is not in the XMLHttpRequest API, and will not work in\n      // browsers.  It is a stable node-xhr2 API.\n\n      // @param {Object} options one or more of the options below\n      // @option options {?http.Agent} httpAgent the default value for the\n      //   nodejsHttpAgent property (the agent used for HTTP requests)\n      // @option options {https.Agent} httpsAgent the default value for the\n      //   nodejsHttpsAgent property (the agent used for HTTPS requests)\n      // @return {undefined} undefined\n      // @see XMLHttpRequest.nodejsSet\n      static nodejsSet(options) {\n        // \"this\" will be set to XMLHttpRequest.prototype, so the instance nodejsSet\n        // operates on default property values.\n        XMLHttpRequest.prototype.nodejsSet(options);\n        return void 0;\n      }\n\n      // Sets the readyState property and fires the readystatechange event.\n\n      // @private\n      // @param {Number} newReadyState the new value of readyState\n      // @return {undefined} undefined\n      _setReadyState(newReadyState) {\n        var event;\n        this.readyState = newReadyState;\n        event = new ProgressEvent('readystatechange');\n        this.dispatchEvent(event);\n        return void 0;\n      }\n\n      // XMLHttpRequest#send() implementation for the file: protocol.\n\n      // @private\n      _sendFile() {\n        if (this._url.method !== 'GET') {\n          throw new NetworkError('The file protocol only supports GET');\n        }\n        throw new Error(\"Protocol file: not implemented\");\n      }\n\n      // XMLHttpRequest#send() implementation for the http: and https: protocols.\n\n      // @private\n      // This method sets the instance variables and calls _sendHxxpRequest(), which\n      // is responsible for building a node.js request and firing it off. The code\n      // in _sendHxxpRequest() is separated off so it can be reused when handling\n      // redirects.\n\n      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method\n      _sendHttp(data) {\n        if (this._sync) {\n          throw new Error(\"Synchronous XHR processing not implemented\");\n        }\n        if ((data != null) && (this._method === 'GET' || this._method === 'HEAD')) {\n          console.warn(`Discarding entity body for ${this._method} requests`);\n          data = null;\n        } else {\n          // Send Content-Length: 0\n          data || (data = '');\n        }\n        // NOTE: this is called before finalizeHeaders so that the uploader can\n        //       figure out Content-Length and Content-Type.\n        this.upload._setData(data);\n        this._finalizeHeaders();\n        this._sendHxxpRequest();\n        return void 0;\n      }\n\n      // Sets up and fires off a HTTP/HTTPS request using the node.js API.\n\n      // @private\n      // This method contains the bulk of the XMLHttpRequest#send() implementation,\n      // and is also used to issue new HTTP requests when handling HTTP redirects.\n\n      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method\n      _sendHxxpRequest() {\n        var agent, hxxp, request;\n        if (this._url.protocol === 'http:') {\n          hxxp = http;\n          agent = this.nodejsHttpAgent;\n        } else {\n          hxxp = https;\n          agent = this.nodejsHttpsAgent;\n        }\n        request = hxxp.request({\n          hostname: this._url.hostname,\n          port: this._url.port,\n          path: this._url.path,\n          auth: this._url.auth,\n          method: this._method,\n          headers: this._headers,\n          agent: agent\n        });\n        this._request = request;\n        if (this.timeout) {\n          request.setTimeout(this.timeout, () => {\n            return this._onHttpTimeout(request);\n          });\n        }\n        request.on('response', (response) => {\n          return this._onHttpResponse(request, response);\n        });\n        request.on('error', (error) => {\n          return this._onHttpRequestError(request, error);\n        });\n        this.upload._startUpload(request);\n        if (this._request === request) { // An http error might have already fired.\n          this._dispatchProgress('loadstart');\n        }\n        return void 0;\n      }\n\n      // Fills in the restricted HTTP headers with default values.\n\n      // This is called right before the HTTP request is sent off.\n\n      // @private\n      // @return {undefined} undefined\n      _finalizeHeaders() {\n        var base;\n        this._headers['Connection'] = 'keep-alive';\n        this._headers['Host'] = this._url.host;\n        if (this._anonymous) {\n          this._headers['Referer'] = 'about:blank';\n        }\n        (base = this._headers)['User-Agent'] || (base['User-Agent'] = this._userAgent);\n        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);\n        return void 0;\n      }\n\n      // Called when the headers of an HTTP response have been received.\n\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   produced this response\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   passed to\n      _onHttpResponse(request, response) {\n        var lengthString;\n        if (this._request !== request) {\n          return;\n        }\n        // Transparent redirection handling.\n        switch (response.statusCode) {\n          case 301:\n          case 302:\n          case 303:\n          case 307:\n          case 308:\n            this._url = this._parseUrl(response.headers['location']);\n            this._method = 'GET';\n            if ('content-type' in this._loweredHeaders) {\n              delete this._headers[this._loweredHeaders['content-type']];\n              delete this._loweredHeaders['content-type'];\n            }\n            // XMLHttpRequestUpload#_finalizeHeaders() sets Content-Type directly.\n            if ('Content-Type' in this._headers) {\n              delete this._headers['Content-Type'];\n            }\n            // Restricted headers can't be set by the user, no need to check\n            // loweredHeaders.\n            delete this._headers['Content-Length'];\n            this.upload._reset();\n            this._finalizeHeaders();\n            this._sendHxxpRequest();\n            return;\n        }\n        this._response = response;\n        this._response.on('data', (data) => {\n          return this._onHttpResponseData(response, data);\n        });\n        this._response.on('end', () => {\n          return this._onHttpResponseEnd(response);\n        });\n        this._response.on('close', () => {\n          return this._onHttpResponseClose(response);\n        });\n        this.responseURL = this._url.href.split('#')[0];\n        this.status = this._response.statusCode;\n        this.statusText = http.STATUS_CODES[this.status];\n        this._parseResponseHeaders(response);\n        if (lengthString = this._responseHeaders['content-length']) {\n          this._totalBytes = parseInt(lengthString);\n          this._lengthComputable = true;\n        } else {\n          this._lengthComputable = false;\n        }\n        return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);\n      }\n\n      // Called when some data has been received on a HTTP connection.\n\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n      // @param {String, Buffer} data the data that has been received\n      _onHttpResponseData(response, data) {\n        if (this._response !== response) {\n          return;\n        }\n        this._responseParts.push(data);\n        this._loadedBytes += data.length;\n        if (this.readyState !== XMLHttpRequest.LOADING) {\n          this._setReadyState(XMLHttpRequest.LOADING);\n        }\n        return this._dispatchProgress('progress');\n      }\n\n      // Called when the HTTP request finished processing.\n\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n      _onHttpResponseEnd(response) {\n        if (this._response !== response) {\n          return;\n        }\n        this._parseResponse();\n        this._request = null;\n        this._response = null;\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress('load');\n        return this._dispatchProgress('loadend');\n      }\n\n      // Called when the underlying HTTP connection was closed prematurely.\n\n      // If this method is called, it will be called after or instead of\n      // onHttpResponseEnd.\n\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n      _onHttpResponseClose(response) {\n        var request;\n        if (this._response !== response) {\n          return;\n        }\n        request = this._request;\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress('error');\n        return this._dispatchProgress('loadend');\n      }\n\n      // Called when the timeout set on the HTTP socket expires.\n\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   fired this event\n      _onHttpTimeout(request) {\n        if (this._request !== request) {\n          return;\n        }\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress('timeout');\n        return this._dispatchProgress('loadend');\n      }\n\n      // Called when something wrong happens on the HTTP socket\n\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   fired this event\n      // @param {Error} error emitted exception\n      _onHttpRequestError(request, error) {\n        if (this._request !== request) {\n          return;\n        }\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress('error');\n        return this._dispatchProgress('loadend');\n      }\n\n      // Fires an XHR progress event.\n\n      // @private\n      // @param {String} eventType one of the XHR progress event types, such as\n      //   'load' and 'progress'\n      _dispatchProgress(eventType) {\n        var event;\n        event = new ProgressEvent(eventType);\n        event.lengthComputable = this._lengthComputable;\n        event.loaded = this._loadedBytes;\n        event.total = this._totalBytes;\n        this.dispatchEvent(event);\n        return void 0;\n      }\n\n      // Sets up the XHR to reflect the fact that an error has occurred.\n\n      // The possible errors are a network error, a timeout, or an abort.\n\n      // @private\n      _setError() {\n        this._request = null;\n        this._response = null;\n        this._responseHeaders = null;\n        this._responseParts = null;\n        return void 0;\n      }\n\n      // Parses a request URL string.\n\n      // @private\n      // This method is a thin wrapper around url.parse() that normalizes HTTP\n      // user/password credentials. It is used to parse the URL string passed to\n      // XMLHttpRequest#open() and the URLs in the Location headers of HTTP redirect\n      // responses.\n\n      // @param {String} urlString the URL to be parsed\n      // @return {Object} parsed URL\n      _parseUrl(urlString) {\n        var absoluteUrlString, index, password, user, xhrUrl;\n        if (this.nodejsBaseUrl === null) {\n          absoluteUrlString = urlString;\n        } else {\n          absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);\n        }\n        xhrUrl = url.parse(absoluteUrlString, false, true);\n        xhrUrl.hash = null;\n        if (xhrUrl.auth && ((typeof user !== \"undefined\" && user !== null) || (typeof password !== \"undefined\" && password !== null))) {\n          index = xhrUrl.auth.indexOf(':');\n          if (index === -1) {\n            if (!user) {\n              user = xhrUrl.auth;\n            }\n          } else {\n            if (!user) {\n              user = xhrUrl.substring(0, index);\n            }\n            if (!password) {\n              password = xhrUrl.substring(index + 1);\n            }\n          }\n        }\n        if (user || password) {\n          xhrUrl.auth = `${user}:${password}`;\n        }\n        return xhrUrl;\n      }\n\n      // Reads the headers from a node.js ClientResponse instance.\n\n      // @private\n      // @param {http.ClientResponse} response the response whose headers will be\n      //   imported into this XMLHttpRequest's state\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n      _parseResponseHeaders(response) {\n        var loweredName, name, ref, value;\n        this._responseHeaders = {};\n        ref = response.headers;\n        for (name in ref) {\n          value = ref[name];\n          loweredName = name.toLowerCase();\n          if (this._privateHeaders[loweredName]) {\n            continue;\n          }\n          if (this._mimeOverride !== null && loweredName === 'content-type') {\n            value = this._mimeOverride;\n          }\n          this._responseHeaders[loweredName] = value;\n        }\n        if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {\n          this._responseHeaders['content-type'] = this._mimeOverride;\n        }\n        return void 0;\n      }\n\n      // Sets the response and responseText properties when an XHR completes.\n\n      // @private\n      // @return {undefined} undefined\n      _parseResponse() {\n        var arrayBuffer, buffer, i, j, jsonError, ref, view;\n        if (Buffer.concat) {\n          buffer = Buffer.concat(this._responseParts);\n        } else {\n          // node 0.6\n          buffer = this._concatBuffers(this._responseParts);\n        }\n        this._responseParts = null;\n        switch (this.responseType) {\n          case 'text':\n            this._parseTextResponse(buffer);\n            break;\n          case 'json':\n            this.responseText = null;\n            try {\n              this.response = JSON.parse(buffer.toString('utf-8'));\n            } catch (error1) {\n              jsonError = error1;\n              this.response = null;\n            }\n            break;\n          case 'buffer':\n            this.responseText = null;\n            this.response = buffer;\n            break;\n          case 'arraybuffer':\n            this.responseText = null;\n            arrayBuffer = new ArrayBuffer(buffer.length);\n            view = new Uint8Array(arrayBuffer);\n            for (i = j = 0, ref = buffer.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {\n              view[i] = buffer[i];\n            }\n            this.response = arrayBuffer;\n            break;\n          default:\n            // TODO(pwnall): content-base detection\n            this._parseTextResponse(buffer);\n        }\n        return void 0;\n      }\n\n      // Sets response and responseText for a 'text' response type.\n\n      // @private\n      // @param {Buffer} buffer the node.js Buffer containing the binary response\n      // @return {undefined} undefined\n      _parseTextResponse(buffer) {\n        var e;\n        try {\n          this.responseText = buffer.toString(this._parseResponseEncoding());\n        } catch (error1) {\n          e = error1;\n          // Unknown encoding.\n          this.responseText = buffer.toString('binary');\n        }\n        this.response = this.responseText;\n        return void 0;\n      }\n\n      // Figures out the string encoding of the XHR's response.\n\n      // This is called to determine the encoding when responseText is set.\n\n      // @private\n      // @return {String} a string encoding, e.g. 'utf-8'\n      _parseResponseEncoding() {\n        var contentType, encoding, match;\n        encoding = null;\n        if (contentType = this._responseHeaders['content-type']) {\n          if (match = /\\;\\s*charset\\=(.*)$/.exec(contentType)) {\n            return match[1];\n          }\n        }\n        return 'utf-8';\n      }\n\n      // Buffer.concat implementation for node 0.6.\n\n      // @private\n      // @param {Array<Buffer>} buffers the buffers whose contents will be merged\n      // @return {Buffer} same as Buffer.concat(buffers) in node 0.8 and above\n      _concatBuffers(buffers) {\n        var buffer, j, k, len, len1, length, target;\n        if (buffers.length === 0) {\n          return Buffer.alloc(0);\n        }\n        if (buffers.length === 1) {\n          return buffers[0];\n        }\n        length = 0;\n        for (j = 0, len = buffers.length; j < len; j++) {\n          buffer = buffers[j];\n          length += buffer.length;\n        }\n        target = Buffer.alloc(length);\n        length = 0;\n        for (k = 0, len1 = buffers.length; k < len1; k++) {\n          buffer = buffers[k];\n          buffer.copy(target, length);\n          length += buffer.length;\n        }\n        return target;\n      }\n\n    };\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler for the\n    //   'readystatechange' event\n    XMLHttpRequest.prototype.onreadystatechange = null;\n\n    // @property {Number} the current state of the XHR object\n    // @see http://www.w3.org/TR/XMLHttpRequest/#states\n    XMLHttpRequest.prototype.readyState = null;\n\n    // @property {String, ArrayBuffer, Buffer, Object} processed XHR response\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute\n    XMLHttpRequest.prototype.response = null;\n\n    // @property {String} response string, if responseType is '' or 'text'\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n    XMLHttpRequest.prototype.responseText = null;\n\n    // @property {String} sets the parsing method for the XHR response\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\n    XMLHttpRequest.prototype.responseType = null;\n\n    // @property {Number} the HTTP\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-status-attribute\n    XMLHttpRequest.prototype.status = null;\n\n    // @property {Number} milliseconds to wait for the request to complete\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n    XMLHttpRequest.prototype.timeout = null;\n\n    // @property {XMLHttpRequestUpload} the associated upload information\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-upload-attribute\n    XMLHttpRequest.prototype.upload = null;\n\n    // readyState value before XMLHttpRequest#open() is called\n    XMLHttpRequest.prototype.UNSENT = 0;\n\n    // readyState value before XMLHttpRequest#open() is called\n    XMLHttpRequest.UNSENT = 0;\n\n    // readyState value after XMLHttpRequest#open() is called, and before\n    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be\n    //   called in this state\n    XMLHttpRequest.prototype.OPENED = 1;\n\n    // readyState value after XMLHttpRequest#open() is called, and before\n    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be\n    //   called in this state\n    XMLHttpRequest.OPENED = 1;\n\n    // readyState value after redirects have been followed and the HTTP headers of\n    //   the final response have been received\n    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;\n\n    // readyState value after redirects have been followed and the HTTP headers of\n    //   the final response have been received\n    XMLHttpRequest.HEADERS_RECEIVED = 2;\n\n    // readyState value when the response entity body is being received\n    XMLHttpRequest.prototype.LOADING = 3;\n\n    // readyState value when the response entity body is being received\n    XMLHttpRequest.LOADING = 3;\n\n    // readyState value after the request has been completely processed\n    XMLHttpRequest.prototype.DONE = 4;\n\n    // readyState value after the request has been completely processed\n    XMLHttpRequest.DONE = 4;\n\n    // @property {http.Agent} the agent option passed to HTTP requests\n\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // It is a stable node-xhr2 API that is useful for testing & going through\n    // web-proxies.\n    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;\n\n    // @property {https.Agent} the agent option passed to HTTPS requests\n\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // It is a stable node-xhr2 API that is useful for testing & going through\n    // web-proxies.\n    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;\n\n    // @property {String} the base URL that relative URLs get resolved to\n\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // Its browser equivalent is the base URL of the document associated with the\n    // Window object. It is a stable node-xhr2 API provided for libraries such as\n    // Angular Universal.\n    XMLHttpRequest.prototype.nodejsBaseUrl = null;\n\n    // HTTP methods that are disallowed in the XHR spec.\n\n    // @private\n    // @see Step 6 in http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n    XMLHttpRequest.prototype._restrictedMethods = {\n      CONNECT: true,\n      TRACE: true,\n      TRACK: true\n    };\n\n    // HTTP request headers that are disallowed in the XHR spec.\n\n    // @private\n    // @see Step 5 in\n    //   http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n    XMLHttpRequest.prototype._restrictedHeaders = {\n      'accept-charset': true,\n      'accept-encoding': true,\n      'access-control-request-headers': true,\n      'access-control-request-method': true,\n      connection: true,\n      'content-length': true,\n      cookie: true,\n      cookie2: true,\n      date: true,\n      dnt: true,\n      expect: true,\n      host: true,\n      'keep-alive': true,\n      origin: true,\n      referer: true,\n      te: true,\n      trailer: true,\n      'transfer-encoding': true,\n      upgrade: true,\n      via: true\n    };\n\n    // HTTP response headers that should not be exposed according to the XHR spec.\n\n    // @private\n    // @see Step 3 in\n    //     http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n    XMLHttpRequest.prototype._privateHeaders = {\n      'set-cookie': true,\n      'set-cookie2': true\n    };\n\n    // The default value of the User-Agent header.\n    XMLHttpRequest.prototype._userAgent = `Mozilla/5.0 (${os.type()} ${os.arch()}) ` + `node.js/${process.versions.node} v8/${process.versions.v8}`;\n\n    return XMLHttpRequest;\n\n  }).call(this);\n\n  // XMLHttpRequest is the result of require('node-xhr2').\n  module.exports = XMLHttpRequest;\n\n  // Make node-xhr2 work as a drop-in replacement for libraries that promote the\n  // following usage pattern:\n  //     var XMLHttpRequest = require('xhr-library-name').XMLHttpRequest\n  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;\n\n  // This file defines the custom errors used in the XMLHttpRequest specification.\n\n    // Thrown if the XHR security policy is violated.\n  SecurityError = class SecurityError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  };\n\n  // Thrown if the XHR security policy is violated.\n  XMLHttpRequest.SecurityError = SecurityError;\n\n  // Usually thrown if the XHR is in the wrong readyState for an operation.\n  InvalidStateError = class InvalidStateError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  };\n\n  // Usually thrown if the XHR is in the wrong readyState for an operation.\n  InvalidStateError = class InvalidStateError extends Error {};\n\n  XMLHttpRequest.InvalidStateError = InvalidStateError;\n\n  // Thrown if there is a problem with the URL passed to the XHR.\n  NetworkError = class NetworkError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  };\n\n  // Thrown if parsing URLs errors out.\n  XMLHttpRequest.SyntaxError = SyntaxError;\n\n  SyntaxError = class SyntaxError extends Error {\n    // @private:\n    constructor() {\n      super();\n    }\n\n  };\n\n  ProgressEvent = (function() {\n    // http://xhr.spec.whatwg.org/#interface-progressevent\n    class ProgressEvent {\n      // Creates a new event.\n\n      // @param {String} type the event type, e.g. 'readystatechange'; must be\n      //   lowercased\n      constructor(type) {\n        this.type = type;\n        this.target = null;\n        this.currentTarget = null;\n        this.lengthComputable = false;\n        this.loaded = 0;\n        this.total = 0;\n      }\n\n    };\n\n    // Getting the time from the OS is expensive, skip on that for now.\n    // @timeStamp = Date.now()\n\n    // @property {Boolean} for compatibility with DOM events\n    ProgressEvent.prototype.bubbles = false;\n\n    // @property {Boolean} for fompatibility with DOM events\n    ProgressEvent.prototype.cancelable = false;\n\n    // @property {XMLHttpRequest} the request that caused this event\n    ProgressEvent.prototype.target = null;\n\n    // @property {Number} number of bytes that have already been downloaded or\n    //   uploaded\n    ProgressEvent.prototype.loaded = null;\n\n    // @property {Boolean} true if the Content-Length response header is available\n    //   and the value of the event's total property is meaningful\n    ProgressEvent.prototype.lengthComputable = null;\n\n    // @property {Number} number of bytes that will be downloaded or uploaded by\n    //   the request that fired the event\n    ProgressEvent.prototype.total = null;\n\n    return ProgressEvent;\n\n  }).call(this);\n\n  // The XHR spec exports the ProgressEvent constructor.\n  XMLHttpRequest.ProgressEvent = ProgressEvent;\n\n  // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n  XMLHttpRequestUpload = class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {\n    // @private\n    // @param {XMLHttpRequest} the XMLHttpRequest that this upload object is\n    //   associated with\n    constructor(request) {\n      super();\n      this._request = request;\n      this._reset();\n    }\n\n    // Sets up this Upload to handle a new request.\n\n    // @private\n    // @return {undefined} undefined\n    _reset() {\n      this._contentType = null;\n      this._body = null;\n      return void 0;\n    }\n\n    // Implements the upload-related part of the send() XHR specification.\n\n    // @private\n    // @param {?String, ?Buffer, ?ArrayBufferView} data the argument passed to\n    //   XMLHttpRequest#send()\n    // @return {undefined} undefined\n    // @see step 4 of http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n    _setData(data) {\n      var body, i, j, k, offset, ref, ref1, view;\n      if (typeof data === 'undefined' || data === null) {\n        return;\n      }\n      if (typeof data === 'string') {\n        // DOMString\n        if (data.length !== 0) {\n          this._contentType = 'text/plain;charset=UTF-8';\n        }\n        this._body = Buffer.from(data, 'utf8');\n      } else if (Buffer.isBuffer(data)) {\n        // node.js Buffer\n        this._body = data;\n      } else if (data instanceof ArrayBuffer) {\n        // ArrayBuffer arguments were supported in an old revision of the spec.\n        body = Buffer.alloc(data.byteLength);\n        view = new Uint8Array(data);\n        for (i = j = 0, ref = data.byteLength; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {\n          body[i] = view[i];\n        }\n        this._body = body;\n      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {\n        // ArrayBufferView\n        body = Buffer.alloc(data.byteLength);\n        offset = data.byteOffset;\n        view = new Uint8Array(data.buffer);\n        for (i = k = 0, ref1 = data.byteLength; (0 <= ref1 ? k < ref1 : k > ref1); i = 0 <= ref1 ? ++k : --k) {\n          body[i] = view[i + offset];\n        }\n        this._body = body;\n      } else {\n        // NOTE: diverging from the XHR specification of coercing everything else\n        //       to Strings via toString() because that behavior masks bugs and is\n        //       rarely useful\n        throw new Error(`Unsupported send() data ${data}`);\n      }\n      return void 0;\n    }\n\n    // Updates the HTTP headers right before the request is sent.\n\n    // This is used to set data-dependent headers such as Content-Length and\n    // Content-Type.\n\n    // @private\n    // @param {Object<String, String>} headers the HTTP headers to be sent\n    // @param {Object<String, String>} loweredHeaders maps lowercased HTTP header\n    //   names (e.g., 'content-type') to the actual names used in the headers\n    //   parameter (e.g., 'Content-Type')\n    // @return {undefined} undefined\n    _finalizeHeaders(headers, loweredHeaders) {\n      if (this._contentType) {\n        if (!('content-type' in loweredHeaders)) {\n          headers['Content-Type'] = this._contentType;\n        }\n      }\n      if (this._body) {\n        // Restricted headers can't be set by the user, no need to check\n        // loweredHeaders.\n        headers['Content-Length'] = this._body.length.toString();\n      }\n      return void 0;\n    }\n\n    // Starts sending the HTTP request data.\n\n    // @private\n    // @param {http.ClientRequest} request the HTTP request\n    // @return {undefined} undefined\n    _startUpload(request) {\n      if (this._body) {\n        request.write(this._body);\n      }\n      request.end();\n      return void 0;\n    }\n\n  };\n\n  // Export the XMLHttpRequestUpload constructor.\n  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;\n\n}).call(this);\n"],"mappings":"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","names":["require_xhr2","__commonJSMin","exports","module","InvalidStateError","NetworkError","ProgressEvent","SecurityError","SyntaxError","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload","http","https","os","url","constructor","onloadstart","onprogress","onabort","onerror","onload","ontimeout","onloadend","_listeners","addEventListener","eventType","listener","base","toLowerCase","push","removeEventListener","index","indexOf","splice","dispatchEvent","event","j","len","listeners","currentTarget","target","type","length","call","prototype","require","options","onreadystatechange","_anonymous","anon","readyState","UNSENT","response","responseText","responseType","responseURL","status","statusText","timeout","upload","_method","_url","_sync","_headers","_loweredHeaders","_mimeOverride","_request","_response","_responseParts","_responseHeaders","_aborting","_error","_loadedBytes","_totalBytes","_lengthComputable","open","method","async","user","password","xhrUrl","toUpperCase","_restrictedMethods","_parseUrl","OPENED","DONE","HEADERS_RECEIVED","LOADING","_setReadyState","setRequestHeader","name","value","loweredName","_restrictedHeaders","test","console","warn","toString","send","data","protocol","_sendFile","_sendHttp","abort","_setError","_dispatchProgress","getResponseHeader","getAllResponseHeaders","lines","ref","results","join","overrideMimeType","newMimeType","nodejsSet","baseUrl","parsedUrl","nodejsHttpAgent","httpAgent","nodejsHttpsAgent","httpsAgent","parse","nodejsBaseUrl","newReadyState","Error","_setData","_finalizeHeaders","_sendHxxpRequest","agent","hxxp","request","hostname","port","path","auth","headers","setTimeout","_onHttpTimeout","on","_onHttpResponse","error","_onHttpRequestError","_startUpload","host","_userAgent","lengthString","statusCode","_reset","_onHttpResponseData","_onHttpResponseEnd","_onHttpResponseClose","href","split","STATUS_CODES","_parseResponseHeaders","parseInt","_parseResponse","lengthComputable","loaded","total","urlString","absoluteUrlString","resolve","hash","substring","_privateHeaders","arrayBuffer","buffer","i","jsonError","view","Buffer","concat","_concatBuffers","_parseTextResponse","JSON","error1","ArrayBuffer","Uint8Array","e","_parseResponseEncoding","contentType","encoding","match","exec","buffers","k","len1","alloc","copy","globalAgent","CONNECT","TRACE","TRACK","connection","cookie","cookie2","date","dnt","expect","origin","referer","te","trailer","upgrade","via","arch","process","versions","node","v8","bubbles","cancelable","_contentType","_body","body","offset","ref1","from","isBuffer","byteLength","byteOffset","loweredHeaders","write","end"],"x_google_ignoreList":[0]}